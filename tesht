#!/usr/bin/env bash

IFS=$'\n'

## internal functions

# main runs any test functions in the files given as arguments.
# It outputs success or failure.
main() {
  local testnameList=$1 filenames=( $2 )

  local startTime=$(Timestamp) failed=0

  for filename in ${filenames[*]}; do
    TestFile $filename "$testnameList" || failed=1
  done

  local endTime=$(Timestamp)
  local d=$(( endTime - startTime ))

  local columns='%-28s    %8s\n'
  if (( failed )); then
    printf $columns "${Red}FAIL$Reset" $(Duration $d)
  else
    printf $columns "${Green}PASS$Reset" $(Duration $d)
  fi
}

# Contains returns whether item is in array.
Contains() {
  local -n array=$1
  [[ "$IFS${array[*]}$IFS" == *"$IFS$2$IFS"* ]]
}

# duration prints a duration.
Duration() { printf '%dms' $1; }

# ListTestNames lists the name of any functions in $1.
# Valid function names begin the line with "test_",
# followed by identifier characters and "()".
ListTestNames() {
  awk '/^test_[-_a-zA-Z0-9]+()/ { sub(/\(.*/, "", $1); print $1 }' $1
}

# PortIsInUse detects whether port is already in use.
PortIsInUse() {
  local pid rc
  command -v lsof &>/dev/null && {
    pid=$(lsof -tiTCP:$port -sTCP:LISTEN) && rc=$? || rc=$?
    (( rc == 0 )) && echo "http server port $port is taken by pid $pid"
    return $rc
  }

  command -v ss &>/dev/null && {
    ss -tuln | grep -q ":$port\b" && rc=$? || rc=$?
    (( rc == 0 )) && echo "http server port $port is taken"
    return $rc
  }

  netstat -an | grep -qE "(:$port\s+).*LISTEN" && rc=$? || rc=$?
  (( rc == 0 )) && echo "http server port $port is taken"
  return $rc
}

Green=$'\033[38;5;82m'
Red=$'\033[38;5;196m'
Reset=$'\033[0m'

Pass="--- $Green"PASS$Reset
Fail="--- $Red"FAIL$Reset
Fatal="--- $Red"FATAL$Reset

# TestFile runs any test functions in file.
# It outputs success or failure.
# It returns an error result code if there was a failure.
TestFile() {
  local filename=$1 testnames=( $2 ) failed=0
  for testname in $(ListTestNames $filename); do
    (( ${#testnames[*]} == 0 )) || Contains testnames $testname || continue

    local columns='%-14s    %8s    %s\n'
    printf $columns '=== RUN' '' $testname

    local startTime=$(Timestamp) rc
    (source $filename; $testname) && rc=$? || rc=$?
    local endTime=$(Timestamp)
    local d=$(( endTime - startTime ))

    columns='\r%-28s    %8s    %s\n'
    case $rc in
      0   ) printf $columns $Pass $(Duration $d) $testname;;

      128 ) printf $columns $Fatal '' $testname; return 128;;

      *   ) printf $columns $Fail '' $testname; failed=1;;
    esac
  done

  return $failed
}

# Timestamp returns the current time in Unix time as milliseconds.
# If we don't have gdate on macos, revert to the builtin SECONDS timer.
Timestamp() {
  [[ $OSTYPE == darwin* ]] && ! command -v gdate && {
    echo $(( SECONDS * 1000 ))
    return
  }

  # we know gdate is available if darwin
  [[ $OSTYPE == darwin* ]] && gdate +%s%3N || date +%s%3N
}

## helpers - good for regular tests and table tests

# t.diff returns a diff of its arguments with special characters shown by cat.
# It is a test helper to generate failed assertion output.
t.diff() {
  diff <(echo "$1") <(echo "$2") | cat -vT | tail -n +2
}

# t.mktempdir makes a temporary directory and returns the directory name.
# It returns an error if it cannot make the directory.
t.mktempdir() {
  dir=$(mktemp -d /tmp/tesht.XXXXXX) || { echo 'could not create temporary directory'; return 1; }
  [[ $dir == /*/* ]] || { echo 'temporary directory does not comply with naming requirements'; return 1; }
  [[ -d $dir ]] || { echo 'temporary directory was made but does not exist now'; return 1; }
  echo $dir
}

## table test helpers

# t.inherit returns an eval'able set of variable assignments from a map.
# The map is an associative array variable in the outer scope named by mapname.
# It is a test helper that makes it simple to work with the keys of the testmap.
# Inspired by nix's inherit keyword.
t.inherit() {
  local mapname=$1
  local -n map=$mapname
  local key
  for key in ${!map[*]}; do
    echo "declare $key=${map[$key]@Q}"
  done
}

# t.run runs the function `subtest` with mapname as an argument.
# mapname is the name of an associative array in an outer scope
# holding at least the key "name".
# t.run outputs success or failure.
# It returns an error result code if there was failure.
# t.run cannot wholly rely on the global namespace for tesht functions/variables
# because it runs in the context of a test, so be careful.
t.run() {
  local testname=$1 mapname=$2

  local -n map=$mapname
  local testname=$testname/${map[name]}

  local green=$'\033[38;5;82m'
  local red=$'\033[38;5;196m'
  local reset=$'\033[0m'

  local pass="    --- $green"PASS$reset
  local fail="    --- $red"FAIL$reset
  local fatal="    --- $red"FATAL$reset

  local columns='%-14s    %8s    %s'
  printf $columns '    === RUN' '' $testname

  local startTime=$(Timestamp) rc
  (subtest $mapname) && rc=$? || rc=$?
  local endTime=$(Timestamp)

  local duration
  printf -v duration '%dms' $(( endTime - startTime ))

  columns='\r%-28s    %8s    %s\n'
  case $rc in
    0   ) printf $columns $pass $duration $testname;;
    128 ) printf $columns $fatal '' $testname;;
    *   ) printf $columns $fail '' $testname;;
  esac

  return $rc
}

# t.start_http_server starts an http server in the current directory on 127.0.0.1:port.
# It waits until the server is ready before returning.
t.start_http_server() {
  local port=${1:-8000}

  PortIsInUse $port && return 1

  # start the http server, redirect stdout so it doesn't hang
  pid=$(python3 -m http.server $port --bind 127.0.0.1 &>/dev/null & echo $!)
  (( pid != 0 )) || { echo 'could not start http server'; return 1; }

  for duration in 0.1 0.2 0.4 0.8; do
    sleep $duration
    curl http://127.0.0.1:$port &>/dev/null && rc=$? || rc=$?
    (( rc == 0 )) && break
  done

  (( rc == 0 )) && echo $pid || echo 'could not connect to http server'

  return $rc
}

# flag to enable tracing
[[ $1 == -x ]] && { shift; set -x; }

TestnameList=${1//,/$IFS}
FilenameList=${2//,/$IFS}

shopt -s nullglob
Filenames=( *_test.bash )
shopt -u nullglob

[[ $FilenameList == '' ]] && FilenameList=${Filenames[*]}
[[ $FilenameList == '' ]] && { echo "no test files found"; exit; }

# strict mode
return 2>/dev/null
set -euf

main "$TestnameList" "$FilenameList"
