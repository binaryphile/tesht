#!/usr/bin/env bash

# Naming Policy:
#
# All function and variable names are camelCased.
# Local variable names begin with lowercase letters, e.g. localVariable.
#
# Global variable names begin with uppercase letters, e.g. GlobalVariable.
# Since this is a library, global variable names are also namespaced by suffixing them with
# the randomly-generated letter T, e.g. GlobalVariableT.
# Global variables are not public.  Library consumers should not be aware of them.
# If users need to interact with them, create accessor functions for the purpose.
#
# Variable declarations that are name references borrow the environment namespace, e.g.
# "local -n ARRAY=$1".
#
# Private function names begin with lowercase letters.
# Public function names begin with uppercase letters.
# Function names are prefixed with "tesht." (always lowercase) so they are namespaced.

IFS=$'\n'

## internal functions

declare -i PassCountT=0 TestCountT=0    # -i enables arithmetic operations

# tesht.Main runs any test functions in the files given as arguments.
# It outputs success or failure.
tesht.Main() {
  local TestnameListT=$1 FilenamesT=( $2 )

  local startTime=$(tesht.timestamp) failed=0

  for filename in ${FilenamesT[*]}; do
    tesht.testFile $filename "$TestnameListT" || failed=1
  done

  local endTime=$(tesht.timestamp)
  local d=$(( endTime - startTime ))

  local columns='%-28s    %8s\n'
  if (( failed )); then
    printf $columns "${Red}FAIL$Reset" $(tesht.duration $d)
  else
    printf $columns "${Green}PASS$Reset" $(tesht.duration $d)
  fi

  echo $PassCountT/$TestCountT
}

# tesht.contains returns whether item is in array.
tesht.contains() {
  local -n ARRAY=$1
  [[ "$IFS${ARRAY[*]}$IFS" == *"$IFS$2$IFS"* ]]
}

# tesht.duration prints a duration.
tesht.duration() { printf '%dms' $1; }

# tesht.listTestnames lists the name of any functions in $1.
# Valid function names begin the line with "test_",
# followed by identifier characters and "()".
tesht.listTestnames() {
  awk '/^test_[-_a-zA-Z0-9]+()/ { sub(/\(.*/, "", $1); print $1 }' $1
}

# tesht.portIsInUse detects whether port is already in use.
tesht.portIsInUse() {
  local pid rc
  command -v lsof &>/dev/null && {
    pid=$(lsof -tiTCP:$port -sTCP:LISTEN) && rc=$? || rc=$?
    (( rc == 0 )) && echo "http server port $port is taken by pid $pid"
    return $rc
  }

  command -v ss &>/dev/null && {
    ss -tuln | grep -q ":$port\b" && rc=$? || rc=$?
    (( rc == 0 )) && echo "http server port $port is taken"
    return $rc
  }

  netstat -an | grep -qE "(:$port\s+).*LISTEN" && rc=$? || rc=$?
  (( rc == 0 )) && echo "http server port $port is taken"
  return $rc
}

Green=$'\033[38;5;82m'
Red=$'\033[38;5;196m'
Yellow=$'\033[38;5;220m'

Reset=$'\033[0m'

Fail="--- ${Red}FAIL$Reset"
Fatal="--- ${Red}FATAL$Reset"
Pass="--- ${Green}PASS$Reset"
Run="=== ${Yellow}RUN$Reset"

# tesht.testFile runs any test functions in file.
# It outputs success or failure.
# It returns an error result code if there was a failure.
tesht.testFile() {
  local filename=$1 testnames=( $2 )

  local failed=0    # overall result -- fails if any individual run fails
  for testname in $(tesht.listTestnames $filename); do
    (( ${#testnames[*]} == 0 )) || tesht.contains testnames $testname || continue

    local columns='%-14s    %8s    %s'
    printf $columns $Run '' $testname

    local startTime=$(tesht.timestamp)

    local tmpname=$(mktemp -u)   # -u doesn't create a file, just a name
    local -i subtestTestCount=0 subtestPassCount=0
    (
      source $filename
      $testname | tesht.tab
      rc=$PIPESTATUS
      [[ $(declare -f $testname) == *tesht.Run* ]] && echo "$subtestTestCount $subtestPassCount" >$tmpname
      exit $rc
    ) && rc=$? || rc=$?
    [[ -e $tmpname ]] && {
      IFS=' ' read -r subtestTestCount subtestPassCount <$tmpname
      rm -f $tmpname
    }

    local endTime=$(tesht.timestamp)
    local d=$(( endTime - startTime ))

    if (( subtestTestCount > 0 )); then
      TestCountT+=$subtestTestCount
      PassCountT+=$subtestPassCount
    else
      TestCountT+=1
    fi

    columns='\r%-28s    %8s    %s\n'
    case $rc in
      0 )
        printf $columns $Pass $(tesht.duration $d) $testname
        (( subtestTestCount == 0 )) && PassCountT+=1
        ;;
      128 ) printf $columns $Fatal '' $testname; return 128 ;;
      *   ) printf $columns $Fail '' $Yellow$testname$Reset; failed=1 ;;
    esac
  done

  return $failed
}

# tesht.timestamp returns the current time in Unix time as milliseconds.
tesht.timestamp() {
  local whole fraction
  # EPOCHREALTIME reports second fractions to nano precision
  IFS=. read -r whole fraction <<<$EPOCHREALTIME
  echo "$whole${fraction:0:3}"
}

## helpers - good for regular tests and table tests

# tesht.Diff returns a diff of its arguments with special characters shown by cat.
# It is a test helper to generate failed assertion output.
tesht.Diff() {
  local got=$1 want=$2
  diff <(echo "$1") <(echo "$2") | cat -vT | tail -n +2
}

# tesht.MktempDir makes a temporary directory and returns the directory name.
# It returns an error if it cannot make the directory.
tesht.MktempDir() {
  dir=$(mktemp -d /tmp/tesht.XXXXXX) || { echo 'could not create temporary directory'; return 1; }

  [[ $dir == /*/* ]] || { echo 'temporary directory does not comply with naming requirements'; return 1; }

  [[ -d $dir ]] || { echo 'temporary directory was made but does not exist now'; return 1; }
  echo $dir
}

## table test helpers

# tesht.Inherit returns an eval'able set of variable assignments from a map.
# The map is an associative array variable in the outer scope named by mapname.
# It is a test helper that makes it simple to work with the keys of the testmap.
# Inspired by nix's Inherit keyword.
tesht.Inherit() {
  local mapname=$1
  local -n map=$mapname
  local key
  for key in ${!map[*]}; do
    echo "declare $key=${map[$key]@Q}"
  done
}

# tesht.Run runs the function `subtest` with mapname as an argument.
# mapname is the name of an associative array in an outer scope
# holding at least the key "name".
# tesht.Run outputs success or failure.
# It returns an error result code if there was failure.
# tesht.Run cannot wholly rely on the global namespace for tesht functions/variables
# because it runs in the context of a test, so be careful.
tesht.Run() {
  local testname=$1 mapname=$2

  local -n map=$mapname
  local testname=$testname/${map[name]}

  local green=$'\033[38;5;82m'
  local red=$'\033[38;5;196m'
  local yellow=$'\033[38;5;220m'

  local reset=$'\033[0m'

  local fail="    --- ${red}FAIL$reset"
  local fatal="    --- ${red}FATAL$reset"
  local pass="    --- ${green}PASS$reset"
  local run="    === ${yellow}RUN$reset"

  local columns='\r%-14s    %8s    %s'
  printf $columns $run '' $testname

  local startTime=$(tesht.timestamp) rc
  (subtest $mapname | tesht.tab) && rc=$? || rc=$?
  local endTime=$(tesht.timestamp)

  local duration
  printf -v duration '%dms' $(( endTime - startTime ))

  subtestTestCount+=1   # locally declared by caller
  columns='\r%-28s    %8s    %s\n'
  case $rc in
    0   )
      printf $columns $pass $duration $testname
      subtestPassCount+=1   # locally declared by caller
      ;;
    128 ) printf $columns $fatal '' $testname;;

    *   ) printf $columns $fail '' $yellow$testname$reset;;
  esac

  return $rc
}

# tesht.StartHttpServer starts an http server in the current directory on 127.0.0.1:port.
# It waits until the server is ready before returning.
tesht.StartHttpServer() {
  local port=${1:-8000}

  tesht.portIsInUse $port && return 1

  # start the http server, redirect stdout so it doesn't hang
  pid=$(python3 -m http.server $port --bind 127.0.0.1 &>/dev/null & echo $!)
  (( pid != 0 )) || { echo 'could not start http server'; return 1; }

  for duration in 0.1 0.2 0.4 0.8; do
    sleep $duration
    curl http://127.0.0.1:$port &>/dev/null && rc=$? || rc=$?
    (( rc == 0 )) && break
  done

  (( rc == 0 )) && echo $pid || echo 'could not connect to http server'

  return $rc
}

# tesht.tab indents each line of input with a tab.
tesht.tab() {
  local line
  while read -r line; do
    printf '\t%s\n' $line
  done
}

# flag to enable tracing
[[ $1 == -x ]] && { shift; set -x; }

TestnameListT=${1//,/$IFS}
FilenameListT=${2//,/$IFS}

shopt -s nullglob
FilenamesT=( *_test.bash )
shopt -u nullglob

[[ $FilenameListT == '' ]] && FilenameListT=${FilenamesT[*]}
[[ $FilenameListT == '' ]] && { echo "no test files found"; exit; }
unset -v FilenamesT

# strict mode
return 2>/dev/null
set -euf

tesht.Main "$TestnameListT" "$FilenameListT"
